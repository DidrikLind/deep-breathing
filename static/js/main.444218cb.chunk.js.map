{"version":3,"sources":["media/breath_icon.svg","components/NormalButton/NormalButton.jsx","media/heart.svg","media/bell_sound.mp3","media/Polaris.mp3","media/bhs.mp3","components/BreathConfigProvider/BreathConfigProvider.jsx","hooks/localstorage.js","components/GuidedBreathhold/GuidedBreathhold.jsx","media/breathing_slow_4000.mp3","media/breathing_medium_3000.mp3","media/breathing_fast_2500.mp3","media/breathingsessionover.mp3","media/lungs.svg","components/GuidedBreathing/GuidedBreathing.jsx","components/ScrollSpyThief/ScrollSpyThief.jsx","components/BreathingController/BreathingController.jsx","components/NumberChooser/NumberChooser.jsx","components/NormalToggleButton/NormalToggleButton.jsx","components/BreathConfigModal/BreathConfigModal.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["NormalButton","text","onClick","className","props","BREATHING_SPEED","defaultConfig","breathing","maxBreath","shouldStartBreathHold","startBreathHoldTime","breathingSpeed","breathHold","pingEveryNthSecond","BreathConfigContext","React","createContext","BreathConfigProvider","children","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","config","setConfig","Provider","setMaxBreath","num","setShouldStartBreathHold","bool","setPingEveryNthSecond","setStartBreathHoldTime","setBreathingSpeed","speed","GuidedBreathhold","runBreathing","useContext","isPaused","setIsPaused","useSound","bellSound","volume","playBell","musicSound","loop","playMusic","stopMusic","stop","pauseMusic","pause","breathHoldStartSound","playBreathHoldStart","duration","useStopwatch","autoStart","seconds","minutes","hours","isRunning","start","reset","startBreathHold","setTimeout","useEffect","join","src","heartIcon","alt","disabled","breathingSpeedSound","breathingSoundSlow","breathingSoundMedium","breathingSoundFast","GuidedBreathing","setRunBreathing","setIsRunning","isDone","setIsDone","breathCounter","setBreathCounter","playBreath","stopBreath","pauseBreath","breathingOverSound","playBreathOver","timer","setInterval","clearInterval","document","querySelector","click","animationLung","animation","style","lungIcon","ScrollSpyThief","sectionData","items","map","currentClassName","row","href","title","scrollSpySectionData","BreathingController","id","NumberChooser","number","setNumber","minVal","maxVal","step","min","max","onChange","enableMobileNumericKeyboard","NormalToggleButton","round","checked","type","readOnly","BreathConfigModal","open","onCloseModal","onClose","center","App","openModal","setOpenModal","breathIcon","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.444218cb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/breath_icon.9f23d969.svg\";","import React from 'react';\n\nimport './NormalButton.scss';\n\n\nconst NormalButton = ({text, onClick, className, ...props}) => (\n  <button className={`normal-button ${className}`} onClick={onClick} {...props}>{text}</button>\n);\n\nexport default NormalButton;","export default __webpack_public_path__ + \"static/media/heart.8e99651c.svg\";","export default __webpack_public_path__ + \"static/media/bell_sound.c679b23d.mp3\";","export default __webpack_public_path__ + \"static/media/Polaris.0cd81f4d.mp3\";","export default __webpack_public_path__ + \"static/media/bhs.c43aefa4.mp3\";","import React from 'react';\n\nimport { useLocalStorage } from \"../../hooks/localstorage\";\n\nexport const BREATHING_SPEED = {\n  SLOW: \"SLOW\",\n  MEDIUM: \"MEDIUM\",\n  FAST: \"FAST\",\n}\nconst defaultConfig = {\n  breathing: {\n    maxBreath: 40,\n    shouldStartBreathHold: false,\n    startBreathHoldTime: 8, // seconds\n    breathingSpeed: BREATHING_SPEED.MEDIUM\n  },\n  breathHold: {\n    pingEveryNthSecond: 30,\n  }\n};\n\nexport const BreathConfigContext = React.createContext(defaultConfig);\n\nconst BreathConfigProvider = ({children}) => {\n  const [config, setConfig] = useLocalStorage('breathConfig', defaultConfig);\n  return (\n    <BreathConfigContext.Provider\n      value={{\n        maxBreath: config.breathing.maxBreath,\n        setMaxBreath: (num) => setConfig({...config, breathing: {...config.breathing, maxBreath: num} }),\n        shouldStartBreathHold: config.breathing.shouldStartBreathHold,\n        setShouldStartBreathHold: (bool) => setConfig({...config, breathing: {...config.breathing, shouldStartBreathHold: bool} }),\n        pingEveryNthSecond: config.breathHold.pingEveryNthSecond,\n        setPingEveryNthSecond: (num) => setConfig({...config, breathHold: {...config.breathHold, pingEveryNthSecond: num }}),\n        startBreathHoldTime: config.breathing.startBreathHoldTime,\n        setStartBreathHoldTime: (num) => setConfig({...config, breathing: {...config.breathing, startBreathHoldTime: num } }),\n        breathingSpeed: config.breathing.breathingSpeed,\n        setBreathingSpeed: (speed) => setConfig({...config, breathing: {...config.breathing, breathingSpeed: speed } }),\n      }}\n  >\n    {children}\n    </BreathConfigContext.Provider>\n  );\n};\n\nexport default BreathConfigProvider;","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};","import React, {useContext, useEffect, useState} from 'react';\nimport useSound from 'use-sound';\nimport { useStopwatch } from 'react-timer-hook';\n\nimport NormalButton from '../NormalButton/NormalButton';\nimport heartIcon from '../../media/heart.svg';\nimport bellSound from '../../media/bell_sound.mp3';\nimport musicSound from '../../media/Polaris.mp3';\nimport breathHoldStartSound from '../../media/bhs.mp3';\nimport { BreathConfigContext } from '../BreathConfigProvider/BreathConfigProvider';\n\nimport './GuidedBreathhold.scss';\n\nconst GuidedBreathhold = ({runBreathing}) => {\n  const { pingEveryNthSecond } = useContext(BreathConfigContext);\n  const [isPaused, setIsPaused] = useState(false);\n  const [playBell] = useSound(bellSound, { volume: 1 });\n  const [playMusic, { stop: stopMusic, pause: pauseMusic }] = useSound(musicSound, { loop: true });\n  const [playBreathHoldStart, { duration }] = useSound(breathHoldStartSound);\n  const {\n    seconds,\n    minutes,\n    hours,\n    isRunning,\n    start,\n    pause,\n    reset\n  } = useStopwatch({ autoStart: false });\n  const startBreathHold = () => {\n    if(!isRunning) {\n      if(!isPaused) {\n        playBreathHoldStart();\n        setTimeout(() => {\n          start();\n          playMusic();\n        }, duration ); // wait to start til voice is done.\n      } else {\n        setIsPaused(false);\n        start();\n        playMusic();\n      }\n\n    }\n  }\n\n  useEffect(() => {\n    if(runBreathing && !isRunning) {\n      reset();\n      startBreathHold();\n    }\n  }, [runBreathing]);\n\n  useEffect(() => {\n    const shouldPlayBell = isRunning && (seconds+1) % pingEveryNthSecond === 0;\n    if(shouldPlayBell) playBell();\n  }, [seconds])\n\n  return (\n    <div className=\"guided-breath-hold\">\n      <h1 className=\"guided-breath-hold-title\">Guided Breath-hold</h1>\n      <div className=\"stop-watch\">\n        <div className=\"watch-time-text\">\n          <span>{hours}</span>:<span>{minutes}</span>:<span>{seconds}</span>\n        </div>\n      </div>\n      <p>\n        <img className={['heart-icon', isRunning && 'heart-icon-animated'].join(\" \")} src={heartIcon} alt=\"logo\" />\n      </p>\n      <NormalButton className={`${isRunning ? 'active-button' : ''}`} text={`${isRunning ? 'Started' : 'Start'}`} disabled={isRunning}\n        onClick={() => startBreathHold()}\n      />\n      <NormalButton className={`${isPaused ? 'active-button' : ''}`} text={`${isPaused ? 'Paused' : 'Pause'}`} disabled={isPaused || !isRunning}\n        onClick={() => {\n          if(isRunning) {\n            pause();\n            pauseMusic();\n            setIsPaused(true);\n          }\n        }}\n      />\n      <NormalButton text=\"Reset\" disabled={!isRunning && !isPaused}\n        onClick={() => {\n          if(isRunning || isPaused) {\n            reset();\n            stopMusic();\n            setIsPaused(false);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default GuidedBreathhold;","export default __webpack_public_path__ + \"static/media/breathing_slow_4000.41849fa9.mp3\";","export default __webpack_public_path__ + \"static/media/breathing_medium_3000.d3f7dacb.mp3\";","export default __webpack_public_path__ + \"static/media/breathing_fast_2500.9261d242.mp3\";","export default __webpack_public_path__ + \"static/media/breathingsessionover.a30488f5.mp3\";","export default __webpack_public_path__ + \"static/media/lungs.e926ca5b.svg\";","import React, {useState,useEffect,useContext} from 'react';\nimport useSound from 'use-sound';\n\nimport breathingSoundSlow from '../../media/breathing_slow_4000.mp3';\nimport breathingSoundMedium from '../../media/breathing_medium_3000.mp3';\nimport breathingSoundFast from '../../media/breathing_fast_2500.mp3';\nimport breathingOverSound from '../../media/breathingsessionover.mp3';\nimport lungIcon from '../../media/lungs.svg';\nimport NormalButton from '../NormalButton/NormalButton';\nimport { BreathConfigContext, BREATHING_SPEED } from '../BreathConfigProvider/BreathConfigProvider';\n\nimport './GuidedBreathing.scss';\n\nconst GuidedBreathing = ({setRunBreathing}) => {\n  const { maxBreath, shouldStartBreathHold, startBreathHoldTime, breathingSpeed } = useContext(BreathConfigContext);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [breathCounter, setBreathCounter] = useState(0);\n\n  const [playBreath, {stop: stopBreath, pause: pauseBreath, duration }] = useSound(breathingSpeedSound(breathingSpeed), {loop: true, volume: 1});\n\n  const [playBreathOver] = useSound(breathingOverSound, {volume: 1});\n  useEffect(() => {\n    if(isRunning) {\n      const timer =\n        breathCounter > 0 && setInterval(() => setBreathCounter(breathCounter + 1), duration);\n      return () => clearInterval(timer);\n    }\n  }, [breathCounter]);\n\n  useEffect(() => {\n    if(isDone) {\n      playBreathOver();\n      setTimeout(() => stopBreath(), 1000);\n      if(shouldStartBreathHold) {\n        // TODO: This is a ugly way to trigger scrollspy. Can we do it better later?\n        document.querySelector('a[href$=\"section-breath-hold\"]').click();\n        setTimeout(() => setRunBreathing(true), startBreathHoldTime * 1000 );\n      }\n    }\n  }, [isDone])\n\n  if(isRunning && breathCounter >= maxBreath) {\n    setIsDone(true);\n    setIsRunning(false);\n  }\n  const animationLung = isRunning ? { animation: `breathing ${duration / 1000}s ease-out infinite normal`} : {}\n  return (\n    <div className=\"guided-breathing\">\n        <h1 className=\"guided-breathing-title\">Guided Breathing</h1>\n        <h2 className=\"guided-breathing-counter\">{breathCounter} / {maxBreath}</h2>\n        <p>\n          <img className='lung-icon' style={animationLung} src={lungIcon} alt=\"logo\" />\n        </p>\n        <NormalButton className={`${isRunning ? 'active-button' : ''}`} text={`${isRunning ? 'Started' : 'Start'}`} disabled={isRunning}\n          onClick={() => {\n            if(!isRunning) {\n              setIsDone(false);\n              setIsRunning(true);\n              isPaused ?  setBreathCounter(breathCounter + 1) : setBreathCounter(1);\n              setIsPaused(false);\n              setRunBreathing(false);\n              playBreath();\n            }\n          }}\n        />\n        <NormalButton className={`${isPaused ? 'active-button' : ''}`} text={`${isPaused ? 'Paused' : 'Pause'}`} disabled={isPaused || !isRunning}\n          onClick={() => {\n            if(isRunning) {\n              setIsRunning(false);\n              setIsPaused(true);\n              pauseBreath();\n            }\n          }}\n        />\n        <NormalButton text=\"Reset\"\n          onClick={() => {\n            stopBreath();\n            setIsRunning(false);\n            setIsPaused(false);\n            setIsDone(false);\n            setBreathCounter(0);\n          }}\n        />\n    </div>\n  );\n};\n\nconst breathingSpeedSound = (breathingSpeed) => {\n  if(breathingSpeed === BREATHING_SPEED.SLOW) {\n    return breathingSoundSlow;\n  }\n  if(breathingSpeed === BREATHING_SPEED.MEDIUM) {\n    return breathingSoundMedium\n  }\n  if(breathingSpeed === BREATHING_SPEED.FAST) {\n    return breathingSoundFast;\n  }\n}\n\nexport default GuidedBreathing;","import React from 'react'\nimport Scrollspy from 'react-scrollspy'\n\nimport './ScrollSpyThief.scss'\n\n// TODO: Fix nice buttons somehow to fit on desktop / mobile! :)\nconst ScrollSpyThief = ({ sectionData }) => {\n  return (\n    <Scrollspy\n      className='scroll-spy-thief' \n      items={sectionData.map(({ item }) => item)}\n      currentClassName='isCurrent'\n    >\n      {sectionData.map((row) =>\n        <li key={row.href}>\n          <a href={row.href}>\n            <div className='dot' />\n            <div className='dot-text'>{row.title}</div>\n          </a>\n        </li>)}\n    </Scrollspy>\n  )\n};\n\nexport default ScrollSpyThief;\n","import React, { useState } from 'react';\n\nimport GuidedBreathhold from '../GuidedBreathhold/GuidedBreathhold';\nimport GuidedBreathing from '../GuidedBreathing/GuidedBreathing';\nimport ScrollSpyThief from '../ScrollSpyThief/ScrollSpyThief';\n\nimport './BreathingController.scss';\n\nconst BreathingController = () => {\n  const [runBreathing, setRunBreathing] = useState(false);\n  return (\n    <>\n      <ScrollSpyThief sectionData={scrollSpySectionData} />\n      <div className=\"breathing-controller\">\n        <section id=\"section-breathing\">\n          <GuidedBreathing setRunBreathing={setRunBreathing} />\n        </section>\n        <div className=\"separator\"/>\n        <section id=\"section-breath-hold\">\n          <GuidedBreathhold runBreathing={runBreathing} />\n        </section>\n      </div>\n    </>\n  );\n};\n\nconst scrollSpySectionData = [\n  { title: 'Breathing', href: '#section-breathing', item: 'section-breation' },\n  { title: 'Breath-Hold', href: '#section-breath-hold', item: 'section-breath-hold' }\n]\n\nexport default BreathingController;","import React, { useState } from 'react';\nimport InputNumber from 'react-input-number';\n\nimport './NumberChooser.scss';\n \nconst NumberChooser = ({ number, setNumber, minVal = 10, maxVal = 20, step = 1, className, ...props}) => {\n  return (\n    <InputNumber \n      className={`number-chooser ${className}`}\n      min={minVal} \n      max={maxVal} \n      step={step} \n      value={number} \n      onChange={setNumber} \n      enableMobileNumericKeyboard \n      {...props}\n    />\n  );\n};\n\nexport default NumberChooser;","import React from 'react';\n\nimport './NormalToggleButton.scss';\n\nconst NormalToggleButton = ({round, checked, className, ...props}) => {\n  return (\n    <div className=\"normal-toggle-button\">\n      <label className={`switch ${className}`}>\n        <input type=\"checkbox\" checked={checked} {...props} readOnly />\n        <span className={`slider ${round ? 'round' : ''}`} />\n      </label>\n    </div>\n  );\n};\n\nexport default NormalToggleButton;","import React, { useContext } from 'react';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\n\nimport NumberChooser from '../NumberChooser/NumberChooser';\nimport NormalToggleButton from '../NormalToggleButton/NormalToggleButton';\nimport { BreathConfigContext, BREATHING_SPEED } from '../BreathConfigProvider/BreathConfigProvider';\n\nimport './BreathConfigModal.scss';\n\n// TODO: Make this dialog prettier. Its ugly as f*ck.\nconst BreathConfigModal = ({open, onCloseModal}) => {\n  const {\n    maxBreath, \n    setMaxBreath, \n    shouldStartBreathHold, \n    setShouldStartBreathHold,\n    pingEveryNthSecond,\n    setPingEveryNthSecond,\n    startBreathHoldTime,\n    setStartBreathHoldTime,\n    breathingSpeed,\n    setBreathingSpeed,\n  } = useContext(BreathConfigContext);\n  return (\n    <div className=\"breath-config-modal-wrapper\">\n      <Modal\n        open={open} \n        onClose={onCloseModal} \n        center\n      >\n        <h2>Configuration</h2>\n        <div className=\"breath-modal-divider\" />\n        <h3>Guided Breathing</h3>\n        <div className=\"breath-modal-breath-speed\">\n            <p>Breathing speed</p>\n            <input type=\"radio\" onClick={() => setBreathingSpeed(BREATHING_SPEED.SLOW) } checked={breathingSpeed === BREATHING_SPEED.SLOW} />\n            <label>Slow</label>\n            <input type=\"radio\" onClick={() => setBreathingSpeed(BREATHING_SPEED.MEDIUM) } checked={breathingSpeed === BREATHING_SPEED.MEDIUM} />\n            <label>Medium</label>\n            <input type=\"radio\" onClick={() => setBreathingSpeed(BREATHING_SPEED.FAST) } checked={breathingSpeed === BREATHING_SPEED.FAST} />\n            <label>Fast</label>\n        </div>\n        <div className=\"breath-modal-max-breath\">\n          <label>Max breath</label>\n          <NumberChooser\n            className=\"max-breath-counter\"\n            number={maxBreath} \n            minVal={10}\n            maxVal={1000}\n            setNumber={setMaxBreath}\n          />\n        </div>\n        <div className=\"breath-modal-auto-start-breath-hold\">\n          <label>Auto start breathhold</label>\n          <NormalToggleButton className=\"auto-start-check\" checked={shouldStartBreathHold} onClick={() => setShouldStartBreathHold(!shouldStartBreathHold)}/>\n          {shouldStartBreathHold &&\n          <>\n            <label>Auto start time</label>\n            <NumberChooser\n              className=\"max-breath-counter\"\n              number={startBreathHoldTime} \n              minVal={0}\n              maxVal={100}\n              setNumber={setStartBreathHoldTime}\n            />\n            s\n          </>\n          }\n        </div>\n        <h3>Guided Breath-hold</h3>\n        <div className=\"breath-modal-ping-every-nth\">\n          <label>Ping every nth second</label>\n          <NumberChooser\n            className=\"ping-breath-counter\"\n            number={pingEveryNthSecond} \n            minVal={1}\n            maxVal={59}\n            setNumber={setPingEveryNthSecond}\n          />\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default BreathConfigModal;","import React, {useState} from 'react';\n\nimport breathIcon from './media/breath_icon.svg';\nimport BreathController from './components/BreathingController/BreathingController';\nimport BreathConfigProvider from './components/BreathConfigProvider/BreathConfigProvider';\nimport BreathConfigModal from './components/BreathConfigModal/BreathConfigModal';\n\nimport './App.scss';\n\nconst App = () => {\n  const [openModal, setOpenModal] = useState(false);\n  const onOpenModal = () => setOpenModal(true);\n  const onCloseModal = () => setOpenModal(false);\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <img \n          className=\"header-icon\" \n          src={breathIcon} \n          onClick={() =>  onOpenModal()}\n          alt=\"logo\" />\n      </header>\n      <BreathConfigProvider>\n        <BreathController />\n        <BreathConfigModal open={openModal} onCloseModal={onCloseModal}/>\n      </BreathConfigProvider>   \n      {/* <br /> */}\n      {/* <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}