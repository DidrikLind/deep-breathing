{"version":3,"sources":["media/breath_icon.svg","components/NormalButton/NormalButton.jsx","media/heart.svg","media/bell_sound.mp3","media/audio_fe4d3bcac9.mp3","components/BreathConfigProvider/BreathConfigProvider.jsx","hooks/localstorage.js","components/GuidedBreathhold/GuidedBreathhold.jsx","media/zapsplat_human_male_deep_breathing_19843_2.2s.mp3","media/breathing_session_over.mp3","media/lungs.svg","components/GuidedBreathing/GuidedBreathing.jsx","components/ScrollSpyThief/ScrollSpyThief.jsx","components/BreathingController/BreathingController.jsx","components/NumberChooser/NumberChooser.jsx","components/NormalToggleButton/NormalToggleButton.jsx","components/BreathConfigModal/BreathConfigModal.jsx","App.js","reportWebVitals.js","index.js"],"names":["NormalButton","text","onClick","className","props","defaultConfig","breathing","maxBreath","shouldStartBreathHold","breathHold","pingEveryNthSecond","BreathConfigContext","React","createContext","BreathConfigProvider","children","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","config","setConfig","Provider","setMaxBreath","num","setShouldStartBreathHold","bool","setPingEveryNthSecond","GuidedBreathhold","runBreathing","useContext","isPaused","setIsPaused","useSound","bellSound","playBell","musicSound","loop","playMusic","stopMusic","stop","pauseMusic","pause","useStopwatch","autoStart","seconds","minutes","hours","isRunning","start","reset","startBreathHold","useEffect","join","src","heartIcon","alt","disabled","GuidedBreathing","setRunBreathing","setIsRunning","isDone","setIsDone","breathCounter","setBreathCounter","breathingSound","playBreath","stopBreath","pauseBreath","breathingOverSound","volume","playBreathOver","timer","setInterval","clearInterval","setTimeout","document","querySelector","click","lungIcon","ScrollSpyThief","sectionData","items","map","currentClassName","row","href","title","scrollSpySectionData","BreathingController","id","NumberChooser","number","setNumber","minVal","maxVal","step","min","max","onChange","enableMobileNumericKeyboard","NormalToggleButton","round","checked","type","readOnly","BreathConfigModal","open","onCloseModal","onClose","center","App","openModal","setOpenModal","breathIcon","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wYAAe,MAA0B,wC,6BCS1BA,G,MAJM,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,UAAcC,EAA/B,qDACnB,gDAAQD,UAAS,wBAAmBA,GAAaD,QAASA,GAAaE,GAAvE,aAA+EH,OCNlE,MAA0B,kCCA1B,MAA0B,uCCA1B,MAA0B,6CCInCI,EAAgB,CACpBC,UAAW,CACTC,UAAW,GACXC,uBAAuB,GAEzBC,WAAY,CACVC,mBAAoB,KAIXC,EAAsBC,IAAMC,cAAcR,GAoBxCS,EAlBc,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,ECdd,SAACC,EAAKC,GAAiB,MAGdC,oBAAS,WAC7C,IAEE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GAEzC,OAAOG,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAGP,OADAC,QAAQC,IAAIF,GACLR,MAZyC,mBAG7CW,EAH6C,KAGhCC,EAHgC,KAiCpD,MAAO,CAACD,EAfS,SAAAE,GACf,IAEE,IAAMC,EACJD,aAAiBE,SAAWF,EAAMF,GAAeE,EAEnDD,EAAeE,GAEfX,OAAOC,aAAaY,QAAQjB,EAAKO,KAAKW,UAAUH,IAChD,MAAON,GAEPC,QAAQC,IAAIF,MDdYU,CAAgB,eAAgB9B,GADjB,mBACpC+B,EADoC,KAC5BC,EAD4B,KAE3C,OACE,cAAC1B,EAAoB2B,SAArB,CACER,MAAO,CACLvB,UAAW6B,EAAO9B,UAAUC,UAC5BgC,aAAc,SAACC,GAAD,OAASH,EAAU,2BAAID,GAAL,IAAa9B,UAAU,2BAAK8B,EAAO9B,WAAb,IAAwBC,UAAWiC,QACzFhC,sBAAuB4B,EAAO9B,UAAUE,sBACxCiC,yBAA0B,SAACC,GAAD,OAAUL,EAAU,2BAAID,GAAL,IAAa9B,UAAU,2BAAK8B,EAAO9B,WAAb,IAAwBE,sBAAuBkC,QAClHhC,mBAAoB0B,EAAO3B,WAAWC,mBACtCiC,sBAAuB,SAACH,GAAD,OAASH,EAAU,2BAAID,GAAL,IAAa3B,WAAW,2BAAK2B,EAAO3B,YAAb,IAAyBC,mBAAoB8B,SAPjH,SAUCzB,KEoDU6B,G,MArEU,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACjBnC,EAAuBoC,qBAAWnC,GAAlCD,mBADmC,EAEXQ,oBAAS,GAFE,mBAEpC6B,EAFoC,KAE1BC,EAF0B,OAGxBC,YAASC,GAArBC,EAHoC,sBAIiBF,YAASG,EAAY,CAAEC,MAAM,IAJ9C,mBAIpCC,EAJoC,YAIjBC,EAJiB,EAIvBC,KAAwBC,EAJD,EAINC,MAJM,EAavCC,uBAAa,CAAEC,WAAW,IAP5BC,EANyC,EAMzCA,QACAC,EAPyC,EAOzCA,QACAC,EARyC,EAQzCA,MACAC,EATyC,EASzCA,UACAC,EAVyC,EAUzCA,MACAP,EAXyC,EAWzCA,MACAQ,EAZyC,EAYzCA,MAGIC,EAAkB,WAClBH,IACFC,IACGlB,GAAUC,GAAY,GACzBG,IACAG,MAaJ,OATAc,qBAAU,WACLvB,IAAiBmB,GAAWG,MAC9B,CAACtB,IAEJuB,qBAAU,WACeJ,GAAyB,IAAZH,GAAiBA,EAAUnD,IAAuB,GACnEyC,MAClB,CAACU,IAGF,sBAAK1D,UAAU,qBAAf,UACE,oBAAIA,UAAU,2BAAd,gCACA,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,+BAAO4D,IADT,IACuB,+BAAOD,IAD9B,IAC8C,+BAAOD,SAGvD,4BACE,qBAAK1D,UAAW,CAAC,aAAc6D,GAAa,uBAAuBK,KAAK,KAAMC,IAAKC,EAAWC,IAAI,WAEpG,cAAC,EAAD,CAAcrE,UAAS,UAAK6D,EAAY,gBAAkB,IAAM/D,KAAI,UAAK+D,EAAY,UAAY,SAAWS,SAAUT,EACpH9D,QAAS,kBAAMiE,OAEjB,cAAC,EAAD,CAAchE,UAAS,UAAK4C,EAAW,gBAAkB,IAAM9C,KAAI,UAAK8C,EAAW,SAAW,SAAW0B,SAAU1B,IAAaiB,EAC9H9D,QAAS,WACJ8D,IACDN,IACAD,IACAT,GAAY,OAIlB,cAAC,EAAD,CAAc/C,KAAK,QAAQwE,UAAWT,IAAcjB,EAClD7C,QAAS,YACJ8D,GAAajB,KACdmB,IACAX,IACAP,GAAY,YCzET,MAA0B,0ECA1B,MAA0B,mDCA1B,MAA0B,kCCsF1B0B,G,MA1ES,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBAAqB,EACA7B,qBAAWnC,GAAhDJ,EADqC,EACrCA,UAAWC,EAD0B,EAC1BA,sBAD0B,EAEXU,oBAAS,GAFE,mBAEtC8C,EAFsC,KAE3BY,EAF2B,OAGb1D,oBAAS,GAHI,mBAGtC6B,EAHsC,KAG5BC,EAH4B,OAIjB9B,oBAAS,GAJQ,mBAItC2D,EAJsC,KAI9BC,EAJ8B,OAKH5D,mBAAS,GALN,mBAKtC6D,EALsC,KAKvBC,EALuB,OAMiB/B,YAASgC,EAAgB,CAAC5B,MAAM,IANjD,mBAMtC6B,EANsC,YAMnBC,EANmB,EAMzB3B,KAAyB4B,EANA,EAMP1B,MANO,EAOpBT,YAASoC,EAAoB,CAACC,OAAQ,IAAxDC,EAPsC,oBAgC7C,OAxBAnB,qBAAU,WACR,GAAGJ,EAAW,CACZ,IAAMwB,EACJT,EAAgB,GAAKU,aAAY,kBAAMT,EAAiBD,EAAgB,KAZ5D,MAad,OAAO,kBAAMW,cAAcF,OAE5B,CAACT,IAEJX,qBAAU,WACLS,IACDU,IACAI,YAAW,kBAAMR,MAAc,KAC5B3E,IAEDoF,SAASC,cAAc,kCAAkCC,QACzDH,YAAW,kBAAMhB,GAAgB,KAAO,SAG3C,CAACE,IAEDb,GAAae,GAAiBxE,IAC/BuE,GAAU,GACVF,GAAa,IAGb,sBAAKzE,UAAU,mBAAf,UACI,oBAAIA,UAAU,yBAAd,8BACA,qBAAIA,UAAU,2BAAd,UAA0C4E,EAA1C,MAA4DxE,KAC5D,4BACE,qBAAKJ,UAAW,CAAC,YAAa6D,GAAa,sBAAsBK,KAAK,KAAMC,IAAKyB,EAAUvB,IAAI,WAEjG,cAAC,EAAD,CAAcrE,UAAS,UAAK6D,EAAY,gBAAkB,IAAM/D,KAAI,UAAK+D,EAAY,UAAY,SAAWS,SAAUT,EACpH9D,QAAS,WACH8D,IACFc,GAAU,GACVF,GAAa,GACDI,EAAZjC,EAA6BgC,EAAgB,EAAsB,GACnE/B,GAAY,GACZ2B,GAAgB,GAChBO,QAIN,cAAC,EAAD,CAAc/E,UAAS,UAAK4C,EAAW,gBAAkB,IAAM9C,KAAI,UAAK8C,EAAW,SAAW,SAAW0B,SAAU1B,IAAaiB,EAC9H9D,QAAS,WACJ8D,IACDY,GAAa,GACb5B,GAAY,GACZoC,QAIN,cAAC,EAAD,CAAcnF,KAAK,QACjBC,QAAS,WACPiF,IACAP,GAAa,GACb5B,GAAY,GACZ8B,GAAU,GACVE,EAAiB,W,iBCtDdgB,G,MAlBQ,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACxB,OACE,cAAC,IAAD,CACE9F,UAAU,mBACV+F,MAAOD,EAAYE,KAAI,qBAAGhF,QAC1BiF,iBAAiB,YAHnB,SAKGH,EAAYE,KAAI,SAACE,GAAD,OACf,6BACE,oBAAGC,KAAMD,EAAIC,KAAb,UACE,qBAAKnG,UAAU,QACf,qBAAKA,UAAU,WAAf,SAA2BkG,EAAIE,YAH1BF,EAAIC,aCYfE,G,MAAuB,CAC3B,CAAED,MAAO,YAAaD,KAAM,qBAAsBnF,KAAM,oBACxD,CAAEoF,MAAO,cAAeD,KAAM,uBAAwBnF,KAAM,yBAG/CsF,EAvBa,WAAO,IAAD,EACQvF,oBAAS,GADjB,mBACzB2B,EADyB,KACX8B,EADW,KAEhC,OACE,qCACE,cAAC,EAAD,CAAgBsB,YAAaO,IAC7B,sBAAKrG,UAAU,uBAAf,UACE,yBAASuG,GAAG,oBAAZ,SACE,cAAC,EAAD,CAAiB/B,gBAAiBA,MAEpC,qBAAKxE,UAAU,cACf,yBAASuG,GAAG,sBAAZ,SACE,cAAC,EAAD,CAAkB7D,aAAcA,a,wBCC3B8D,G,MAfO,SAAC,GAAmF,IAAjFC,EAAgF,EAAhFA,OAAQC,EAAwE,EAAxEA,UAAwE,IAA7DC,cAA6D,MAApD,GAAoD,MAAhDC,cAAgD,MAAvC,GAAuC,MAAnCC,YAAmC,MAA5B,EAA4B,EAAzB7G,EAAyB,EAAzBA,UAAcC,EAAW,2EACvG,OACE,cAAC,IAAD,aACED,UAAS,yBAAoBA,GAC7B8G,IAAKH,EACLI,IAAKH,EACLC,KAAMA,EACNlF,MAAO8E,EACPO,SAAUN,EACVO,6BAA2B,GACvBhH,MCAKiH,G,MAXY,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAASpH,EAAyB,EAAzBA,UAAcC,EAAW,+CACpE,OACE,qBAAKD,UAAU,uBAAf,SACE,wBAAOA,UAAS,iBAAYA,GAA5B,UACE,+CAAOqH,KAAK,WAAWD,QAASA,GAAanH,GAA7C,IAAoDqH,UAAQ,KAC5D,sBAAMtH,UAAS,iBAAYmH,EAAQ,QAAU,aCkDtCI,G,MAjDW,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,aAAkB,EAQ9C9E,qBAAWnC,GANbJ,EAFgD,EAEhDA,UACAgC,EAHgD,EAGhDA,aACA/B,EAJgD,EAIhDA,sBACAiC,EALgD,EAKhDA,yBACA/B,EANgD,EAMhDA,mBACAiC,EAPgD,EAOhDA,sBAEF,OACE,qBAAKxC,UAAU,8BAAf,SACE,eAAC,IAAD,CACEwH,KAAMA,EACNE,QAASD,EACTE,QAAM,EAHR,UAKE,+CACA,qBAAK3H,UAAU,yBACf,kDACA,sBAAKA,UAAU,0BAAf,UACE,+CACA,cAAC,EAAD,CACEA,UAAU,qBACVyG,OAAQrG,EACRuG,OAAQ,GACRC,OAAQ,IACRF,UAAWtE,OAGf,sBAAKpC,UAAU,sCAAf,UACE,0DACA,cAAC,EAAD,CAAoBA,UAAU,mBAAmBoH,QAAS/G,EAAuBN,QAAS,kBAAMuC,GAA0BjC,SAE5H,oDACA,sBAAKL,UAAU,8BAAf,UACE,0DACA,cAAC,EAAD,CACEA,UAAU,sBACVyG,OAAQlG,EACRoG,OAAQ,EACRC,OAAQ,GACRF,UAAWlE,cCnBRoF,G,MAvBH,WAAO,IAAD,EACkB7G,oBAAS,GAD3B,mBACT8G,EADS,KACEC,EADF,KAIhB,OACE,sBAAK9H,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBACEA,UAAU,cACVmE,IAAK4D,EACLhI,QAAS,kBARS+H,GAAa,IAS/BzD,IAAI,WAER,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAmBmD,KAAMK,EAAWJ,aAZrB,kBAAMK,GAAa,cCA3BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBpG,UACxC,6BAAqBqG,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjD,SAASkD,eAAe,SAM1BX,M","file":"static/js/main.4dbc3443.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/breath_icon.9f23d969.svg\";","import React from 'react';\n\nimport './NormalButton.scss';\n\n\nconst NormalButton = ({text, onClick, className, ...props}) => (\n  <button className={`normal-button ${className}`} onClick={onClick} {...props}>{text}</button>\n);\n\nexport default NormalButton;","export default __webpack_public_path__ + \"static/media/heart.8e99651c.svg\";","export default __webpack_public_path__ + \"static/media/bell_sound.c679b23d.mp3\";","export default __webpack_public_path__ + \"static/media/audio_fe4d3bcac9.a379b9b0.mp3\";","import React from 'react';\n\nimport { useLocalStorage } from \"../../hooks/localstorage\";\n\nconst defaultConfig = {\n  breathing: {\n    maxBreath: 40,\n    shouldStartBreathHold: false,\n  },\n  breathHold: {\n    pingEveryNthSecond: 30,\n  }\n};\n\nexport const BreathConfigContext = React.createContext(defaultConfig);\n\nconst BreathConfigProvider = ({children}) => {\n  const [config, setConfig] = useLocalStorage('breathConfig', defaultConfig);\n  return (\n    <BreathConfigContext.Provider\n      value={{\n        maxBreath: config.breathing.maxBreath,\n        setMaxBreath: (num) => setConfig({...config, breathing: {...config.breathing, maxBreath: num} }),\n        shouldStartBreathHold: config.breathing.shouldStartBreathHold,\n        setShouldStartBreathHold: (bool) => setConfig({...config, breathing: {...config.breathing, shouldStartBreathHold: bool} }),\n        pingEveryNthSecond: config.breathHold.pingEveryNthSecond,\n        setPingEveryNthSecond: (num) => setConfig({...config, breathHold: {...config.breathHold, pingEveryNthSecond: num }}),\n      }}\n  >\n    {children}\n    </BreathConfigContext.Provider>\n  );\n};\n\nexport default BreathConfigProvider;","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};","import React, {useContext, useEffect, useState} from 'react';\nimport useSound from 'use-sound';\nimport { useStopwatch } from 'react-timer-hook';\n\nimport NormalButton from '../NormalButton/NormalButton';\nimport heartIcon from '../../media/heart.svg';\nimport bellSound from '../../media/bell_sound.mp3';\nimport musicSound from '../../media/audio_fe4d3bcac9.mp3';\nimport { BreathConfigContext } from '../BreathConfigProvider/BreathConfigProvider';\n\nimport './GuidedBreathhold.scss';\n\nconst GuidedBreathhold = ({runBreathing}) => {\n  const { pingEveryNthSecond } = useContext(BreathConfigContext);\n  const [isPaused, setIsPaused] = useState(false);\n  const [playBell] = useSound(bellSound);\n  const [playMusic, { stop: stopMusic, pause: pauseMusic }] = useSound(musicSound, { loop: true });\n  const {\n    seconds,\n    minutes,\n    hours,\n    isRunning,\n    start,\n    pause,\n    reset\n  } = useStopwatch({ autoStart: false });\n\n  const startBreathHold = () => {\n    if(!isRunning) {\n      start();\n      if(isPaused) setIsPaused(false);\n      playBell();\n      playMusic();\n    }\n  }\n\n  useEffect(() => {\n    if(runBreathing && !isRunning) startBreathHold();\n  }, [runBreathing]);\n\n  useEffect(() => {\n    const shouldPlayBell = isRunning && seconds !== 0 && seconds % pingEveryNthSecond === 0;\n    if(shouldPlayBell) playBell();\n  }, [seconds])\n\n  return (\n    <div className=\"guided-breath-hold\">\n      <h1 className=\"guided-breath-hold-title\">Guided Breath-hold</h1>\n      <div className=\"stop-watch\">\n        <div className=\"watch-time-text\">\n          <span>{hours}</span>:<span>{minutes}</span>:<span>{seconds}</span>\n        </div>\n      </div>\n      <p>\n        <img className={['heart-icon', isRunning && 'heart-icon-animated'].join(\" \")} src={heartIcon} alt=\"logo\" />\n      </p>\n      <NormalButton className={`${isRunning ? 'active-button' : ''}`} text={`${isRunning ? 'Started' : 'Start'}`} disabled={isRunning}\n        onClick={() => startBreathHold()}\n      />\n      <NormalButton className={`${isPaused ? 'active-button' : ''}`} text={`${isPaused ? 'Paused' : 'Pause'}`} disabled={isPaused || !isRunning}\n        onClick={() => {\n          if(isRunning) {\n            pause();\n            pauseMusic();\n            setIsPaused(true);\n          }\n        }}\n      />\n      <NormalButton text=\"Reset\" disabled={!isRunning && !isPaused}\n        onClick={() => {\n          if(isRunning || isPaused) {\n            reset();\n            stopMusic();\n            setIsPaused(false);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default GuidedBreathhold;","export default __webpack_public_path__ + \"static/media/zapsplat_human_male_deep_breathing_19843_2.2s.f91a10f9.mp3\";","export default __webpack_public_path__ + \"static/media/breathing_session_over.3e8fa907.mp3\";","export default __webpack_public_path__ + \"static/media/lungs.e926ca5b.svg\";","import React, {useState,useEffect,useContext} from 'react';\nimport useSound from 'use-sound';\n\nimport breathingSound from '../../media/zapsplat_human_male_deep_breathing_19843_2.2s.mp3';\nimport breathingOverSound from '../../media/breathing_session_over.mp3';\nimport lungIcon from '../../media/lungs.svg';\nimport NormalButton from '../NormalButton/NormalButton';\nimport { BreathConfigContext } from '../BreathConfigProvider/BreathConfigProvider';\n\nimport './GuidedBreathing.scss';\n\nconst BREATH_TIME = 2200; // TODO: ADdd config for breathing time and add corresponding sounds for it!\nconst GuidedBreathing = ({setRunBreathing}) => {\n  const { maxBreath, shouldStartBreathHold } = useContext(BreathConfigContext);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [breathCounter, setBreathCounter] = useState(0);\n  const [playBreath, {stop: stopBreath, pause: pauseBreath }] = useSound(breathingSound, {loop: true});\n  const [playBreathOver] = useSound(breathingOverSound, {volume: 1});\n  useEffect(() => {\n    if(isRunning) {\n      const timer =\n        breathCounter > 0 && setInterval(() => setBreathCounter(breathCounter + 1), BREATH_TIME);\n      return () => clearInterval(timer);\n    }\n  }, [breathCounter]);\n\n  useEffect(() => {\n    if(isDone) {\n      playBreathOver();\n      setTimeout(() => stopBreath(), 1000);\n      if(shouldStartBreathHold) {\n        // TODO: This is a ugly way to trigger scrollspy. Can we do it better later?\n        document.querySelector('a[href$=\"section-breath-hold\"]').click();\n        setTimeout(() => setRunBreathing(true), 8000); // TODO: Add configuration for how long to wait til auto start.\n      }\n    }\n  }, [isDone])\n\n  if(isRunning && breathCounter >= maxBreath) {\n    setIsDone(true);\n    setIsRunning(false);\n  }\n  return (\n    <div className=\"guided-breathing\">\n        <h1 className=\"guided-breathing-title\">Guided Breathing</h1>\n        <h2 className=\"guided-breathing-counter\">{breathCounter} / {maxBreath}</h2>\n        <p>\n          <img className={['lung-icon', isRunning && 'lung-icon-animated'].join(\" \")} src={lungIcon} alt=\"logo\" />\n        </p>\n        <NormalButton className={`${isRunning ? 'active-button' : ''}`} text={`${isRunning ? 'Started' : 'Start'}`} disabled={isRunning}\n          onClick={() => {\n            if(!isRunning) {\n              setIsDone(false);\n              setIsRunning(true);\n              isPaused ?  setBreathCounter(breathCounter + 1) : setBreathCounter(1);\n              setIsPaused(false);\n              setRunBreathing(false);\n              playBreath();\n            }\n          }}\n        />\n        <NormalButton className={`${isPaused ? 'active-button' : ''}`} text={`${isPaused ? 'Paused' : 'Pause'}`} disabled={isPaused || !isRunning}\n          onClick={() => {\n            if(isRunning) {\n              setIsRunning(false);\n              setIsPaused(true);\n              pauseBreath();\n            }\n          }}\n        />\n        <NormalButton text=\"Reset\"\n          onClick={() => {\n            stopBreath();\n            setIsRunning(false);\n            setIsPaused(false);\n            setIsDone(false);\n            setBreathCounter(0);\n          }}\n        />\n    </div>\n  );\n\n};\n\nexport default GuidedBreathing;","import React from 'react'\nimport Scrollspy from 'react-scrollspy'\n\nimport './ScrollSpyThief.scss'\n\n// TODO: Fix nice buttons somehow to fit on desktop / mobile! :)\nconst ScrollSpyThief = ({ sectionData }) => {\n  return (\n    <Scrollspy\n      className='scroll-spy-thief' \n      items={sectionData.map(({ item }) => item)}\n      currentClassName='isCurrent'\n    >\n      {sectionData.map((row) =>\n        <li key={row.href}>\n          <a href={row.href}>\n            <div className='dot' />\n            <div className='dot-text'>{row.title}</div>\n          </a>\n        </li>)}\n    </Scrollspy>\n  )\n};\n\nexport default ScrollSpyThief;\n","import React, { useState } from 'react';\n\nimport GuidedBreathhold from '../GuidedBreathhold/GuidedBreathhold';\nimport GuidedBreathing from '../GuidedBreathing/GuidedBreathing';\nimport ScrollSpyThief from '../ScrollSpyThief/ScrollSpyThief';\n\nimport './BreathingController.scss';\n\nconst BreathingController = () => {\n  const [runBreathing, setRunBreathing] = useState(false);\n  return (\n    <>\n      <ScrollSpyThief sectionData={scrollSpySectionData} />\n      <div className=\"breathing-controller\">\n        <section id=\"section-breathing\">\n          <GuidedBreathing setRunBreathing={setRunBreathing} />\n        </section>\n        <div className=\"separator\"/>\n        <section id=\"section-breath-hold\">\n          <GuidedBreathhold runBreathing={runBreathing} />\n        </section>\n      </div>\n    </>\n  );\n};\n\nconst scrollSpySectionData = [\n  { title: 'Breathing', href: '#section-breathing', item: 'section-breation' },\n  { title: 'Breath-Hold', href: '#section-breath-hold', item: 'section-breath-hold' }\n]\n\nexport default BreathingController;","import React, { useState } from 'react';\nimport InputNumber from 'react-input-number';\n\nimport './NumberChooser.scss';\n \nconst NumberChooser = ({ number, setNumber, minVal = 10, maxVal = 20, step = 1, className, ...props}) => {\n  return (\n    <InputNumber \n      className={`number-chooser ${className}`}\n      min={minVal} \n      max={maxVal} \n      step={step} \n      value={number} \n      onChange={setNumber} \n      enableMobileNumericKeyboard \n      {...props}\n    />\n  );\n};\n\nexport default NumberChooser;","import React from 'react';\n\nimport './NormalToggleButton.scss';\n\nconst NormalToggleButton = ({round, checked, className, ...props}) => {\n  return (\n    <div className=\"normal-toggle-button\">\n      <label className={`switch ${className}`}>\n        <input type=\"checkbox\" checked={checked} {...props} readOnly />\n        <span className={`slider ${round ? 'round' : ''}`} />\n      </label>\n    </div>\n  );\n};\n\nexport default NormalToggleButton;","import React, { useContext } from 'react';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\n\nimport NumberChooser from '../NumberChooser/NumberChooser';\nimport NormalToggleButton from '../NormalToggleButton/NormalToggleButton';\nimport { BreathConfigContext } from '../BreathConfigProvider/BreathConfigProvider';\n\nimport './BreathConfigModal.scss';\n\nconst BreathConfigModal = ({open, onCloseModal}) => {\n  const {\n    maxBreath, \n    setMaxBreath, \n    shouldStartBreathHold, \n    setShouldStartBreathHold,\n    pingEveryNthSecond,\n    setPingEveryNthSecond,\n  } = useContext(BreathConfigContext);\n  return (\n    <div className=\"breath-config-modal-wrapper\">\n      <Modal\n        open={open} \n        onClose={onCloseModal} \n        center\n      >\n        <h2>Configuration</h2>\n        <div className=\"breath-modal-divider\" />\n        <h3>Guided Breathing</h3>\n        <div className=\"breath-modal-max-breath\">\n          <label>Max breath</label>\n          <NumberChooser\n            className=\"max-breath-counter\"\n            number={maxBreath} \n            minVal={10}\n            maxVal={1000}\n            setNumber={setMaxBreath}\n          />\n        </div>\n        <div className=\"breath-modal-auto-start-breath-hold\">\n          <label>Auto start breathhold</label>\n          <NormalToggleButton className=\"auto-start-check\" checked={shouldStartBreathHold} onClick={() => setShouldStartBreathHold(!shouldStartBreathHold)}/>\n        </div>\n        <h3>Guided Breath-hold</h3>\n        <div className=\"breath-modal-ping-every-nth\">\n          <label>Ping every nth second</label>\n          <NumberChooser\n            className=\"ping-breath-counter\"\n            number={pingEveryNthSecond} \n            minVal={1}\n            maxVal={59}\n            setNumber={setPingEveryNthSecond}\n          />\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default BreathConfigModal;","import React, {useState} from 'react';\n\nimport breathIcon from './media/breath_icon.svg';\nimport BreathController from './components/BreathingController/BreathingController';\nimport BreathConfigProvider from './components/BreathConfigProvider/BreathConfigProvider';\nimport BreathConfigModal from './components/BreathConfigModal/BreathConfigModal';\n\nimport './App.scss';\n\nconst App = () => {\n  const [openModal, setOpenModal] = useState(false);\n  const onOpenModal = () => setOpenModal(true);\n  const onCloseModal = () => setOpenModal(false);\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <img \n          className=\"header-icon\" \n          src={breathIcon} \n          onClick={() =>  onOpenModal()}\n          alt=\"logo\" />\n      </header>\n      <BreathConfigProvider>\n        <BreathController />\n        <BreathConfigModal open={openModal} onCloseModal={onCloseModal}/>\n      </BreathConfigProvider>   \n      {/* <br /> */}\n      {/* <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}