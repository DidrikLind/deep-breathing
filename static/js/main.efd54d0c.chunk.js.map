{"version":3,"sources":["media/breath_icon.svg","components/NormalButton/NormalButton.jsx","media/heart.svg","media/bell_sound.mp3","media/audio_fe4d3bcac9.mp3","components/GuidedBreathhold/GuidedBreathhold.jsx","media/zapsplat_human_male_deep_breathing_19843_2.2s.mp3","media/breathing_session_over.mp3","media/lungs.svg","components/BreathConfigProvider/BreathConfigProvider.jsx","hooks/localstorage.js","components/GuidedBreathing/GuidedBreathing.jsx","components/BreathingController/BreathingController.jsx","components/NumberChooser/NumberChooser.jsx","components/BreathConfigModal/BreathConfigModal.jsx","App.js","reportWebVitals.js","index.js"],"names":["NormalButton","text","onClick","className","props","GuidedBreathhold","runBreathing","useState","isPaused","setIsPaused","useSound","bellSound","playBell","musicSound","loop","playMusic","stopMusic","stop","pauseMusic","pause","useStopwatch","autoStart","seconds","minutes","hours","isRunning","start","reset","startBreathHold","useEffect","join","src","heartIcon","alt","disabled","defaultConfig","breathing","maxBreath","shouldStartBreathHold","breathHold","BreathConfigContext","React","createContext","BreathConfigProvider","children","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","config","setConfig","Provider","setMaxBreath","num","setShouldStartBreathHold","bool","GuidedBreathing","setRunBreathing","useContext","setIsRunning","isDone","setIsDone","breathCounter","setBreathCounter","breathingSound","playBreath","stopBreath","pauseBreath","breathingOverSound","interrupt","playBreathOver","timer","setInterval","clearInterval","setTimeout","lungIcon","BreathingController","NumberChooser","number","setNumber","minVal","maxVal","step","min","max","onChange","enableMobileNumericKeyboard","BreathConfigModal","open","onCloseModal","onClose","center","type","checked","readOnly","App","openModal","setOpenModal","breathIcon","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efd54d0c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/breath_icon.9f23d969.svg\";","import React from 'react';\n\nimport './NormalButton.scss';\n\n\nconst NormalButton = ({text, onClick, className, ...props}) => (\n  <button className={`normal-button ${className}`} onClick={onClick} {...props}>{text}</button>\n);\n\nexport default NormalButton;","export default __webpack_public_path__ + \"static/media/heart.8e99651c.svg\";","export default __webpack_public_path__ + \"static/media/bell_sound.c679b23d.mp3\";","export default __webpack_public_path__ + \"static/media/audio_fe4d3bcac9.a379b9b0.mp3\";","import React, {useEffect, useState} from 'react';\nimport useSound from 'use-sound';\nimport { useStopwatch } from 'react-timer-hook';\n\nimport NormalButton from '../NormalButton/NormalButton';\nimport heartIcon from '../../media/heart.svg';\nimport bellSound from '../../media/bell_sound.mp3';\nimport musicSound from '../../media/audio_fe4d3bcac9.mp3';\n\nimport './GuidedBreathhold.scss';\n\nconst SOUND_EVERY_NTH_SECOND = 30; // TODO: Add configuration for BreathHold\nconst GuidedBreathhold = ({runBreathing}) => {\n  const [isPaused, setIsPaused] = useState(false);\n  const [playBell] = useSound(bellSound);\n  const [playMusic, { stop: stopMusic, pause: pauseMusic }] = useSound(musicSound, { loop: true });\n  const {\n    seconds,\n    minutes,\n    hours,\n    isRunning,\n    start,\n    pause,\n    reset\n  } = useStopwatch({ autoStart: false });\n\n  const startBreathHold = () => {\n    if(!isRunning) {\n      start();\n      if(isPaused) setIsPaused(false);\n      playBell();\n      playMusic();\n    }\n  }\n\n  useEffect(() => {\n    if(runBreathing && !isRunning) startBreathHold();\n  }, [runBreathing, startBreathHold, isRunning]);\n\n  useEffect(() => {\n    const shouldPlayBell = isRunning && seconds !== 0 && seconds % SOUND_EVERY_NTH_SECOND === 0;\n    if(shouldPlayBell) playBell();\n  }, [seconds])\n\n  return (\n    <div className=\"guided-breath-hold\">\n      <h1 className=\"guided-breath-hold-title\">Guided Breath-hold</h1>\n      <div className=\"stop-watch\">\n        <div className=\"watch-time-text\">\n          <span>{hours}</span>:<span>{minutes}</span>:<span>{seconds}</span>\n        </div>\n      </div>\n      <p>\n        <img className={['heart-icon', isRunning && 'heart-icon-animated'].join(\" \")} src={heartIcon} alt=\"logo\" />\n      </p>\n      <NormalButton className={`${isRunning ? 'active-button' : ''}`} text={`${isRunning ? 'Started' : 'Start'}`} disabled={isRunning}\n        onClick={() => startBreathHold()}\n      />\n      <NormalButton className={`${isPaused ? 'active-button' : ''}`} text={`${isPaused ? 'Paused' : 'Pause'}`} disabled={isPaused || !isRunning}\n        onClick={() => {\n          if(isRunning) {\n            pause();\n            pauseMusic();\n            setIsPaused(true);\n          }\n        }}\n      />\n      <NormalButton text=\"Reset\" disabled={!isRunning && !isPaused}\n        onClick={() => {\n          if(isRunning || isPaused) {\n            reset();\n            stopMusic();\n            setIsPaused(false);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default GuidedBreathhold;","export default __webpack_public_path__ + \"static/media/zapsplat_human_male_deep_breathing_19843_2.2s.f91a10f9.mp3\";","export default __webpack_public_path__ + \"static/media/breathing_session_over.3e8fa907.mp3\";","export default __webpack_public_path__ + \"static/media/lungs.e926ca5b.svg\";","import React from 'react';\n\nimport { useLocalStorage } from \"../../hooks/localstorage\";\n\nconst defaultConfig = {\n  breathing: {\n    maxBreath: 40,\n    shouldStartBreathHold: false,\n  },\n  breathHold: {\n    // TODO: fill me up.\n  }\n};\n\nexport const BreathConfigContext = React.createContext(defaultConfig);\n\nconst BreathConfigProvider = ({children}) => {\n  const [config, setConfig] = useLocalStorage('breathConfig', defaultConfig);\n  return (\n    <BreathConfigContext.Provider\n      value={{\n        maxBreath: config.breathing.maxBreath,\n        setMaxBreath: (num) => setConfig({...config, breathing: {...config.breathing, maxBreath: num} }),\n        shouldStartBreathHold: config.breathing.shouldStartBreathHold,\n        setShouldStartBreathHold: (bool) => setConfig({...config, breathing: {...config.breathing, shouldStartBreathHold: bool} }),\n      }}\n  >\n    {children}\n    </BreathConfigContext.Provider>\n  );\n};\n\nexport default BreathConfigProvider;","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};","import React, {useState,useEffect,useContext} from 'react';\nimport useSound from 'use-sound';\n\nimport breathingSound from '../../media/zapsplat_human_male_deep_breathing_19843_2.2s.mp3';\nimport breathingOverSound from '../../media/breathing_session_over.mp3';\nimport lungIcon from '../../media/lungs.svg';\nimport NormalButton from '../NormalButton/NormalButton';\nimport { BreathConfigContext } from '../BreathConfigProvider/BreathConfigProvider';\n\nimport './GuidedBreathing.scss';\n\nconst BREATH_TIME = 2200;\nconst GuidedBreathing = ({setRunBreathing}) => {\n  const { maxBreath, shouldStartBreathHold } = useContext(BreathConfigContext);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [breathCounter, setBreathCounter] = useState(0);\n  const [playBreath, {stop: stopBreath, pause: pauseBreath }] = useSound(breathingSound, \n    {\n      loop: true\n    }\n  );\n  const [playBreathOver] = useSound(breathingOverSound, {interrupt: false});\n  useEffect(() => {\n    if(isRunning) {\n      const timer =\n        breathCounter > 0 && setInterval(() => setBreathCounter(breathCounter + 1), BREATH_TIME);\n      return () => clearInterval(timer);\n    }\n  }, [breathCounter]);\n\n  useEffect(() => {\n    if(isDone) {\n      playBreathOver();\n      setTimeout(() => stopBreath(), 1000);\n      if(shouldStartBreathHold) setTimeout(() => setRunBreathing(true), 2000);\n    }\n  }, [isDone])\n\n  if(isRunning && breathCounter >= maxBreath) {\n    setIsDone(true);\n    setIsRunning(false);\n  }\n  return (\n    <div className=\"guided-breathing\">\n        <h1 className=\"guided-breathing-title\">Guided Breathing</h1>\n        <h2>{breathCounter} / {maxBreath}</h2>\n        <p>\n          <img className={['lung-icon', isRunning && 'lung-icon-animated'].join(\" \")} src={lungIcon} alt=\"logo\" />\n        </p>\n        <NormalButton className={`${isRunning ? 'active-button' : ''}`} text={`${isRunning ? 'Started' : 'Start'}`} disabled={isRunning}\n          onClick={() => {\n            if(!isRunning) {\n              setIsDone(false);\n              setIsRunning(true);\n              isPaused ?  setBreathCounter(breathCounter + 1) : setBreathCounter(1);\n              setIsPaused(false);\n              playBreath();\n            }\n          }}\n        />\n        <NormalButton className={`${isPaused ? 'active-button' : ''}`} text={`${isPaused ? 'Paused' : 'Pause'}`} disabled={isPaused || !isRunning}\n          onClick={() => {\n            if(isRunning) {\n              setIsRunning(false);\n              setIsPaused(true);\n              pauseBreath();\n            }\n          }}\n        />\n        <NormalButton text=\"Reset\"\n          onClick={() => {\n            stopBreath();\n            setIsRunning(false);\n            setIsPaused(false);\n            setIsDone(false);\n            setBreathCounter(0);\n          }}\n        />\n    </div>\n  );\n\n};\n\nexport default GuidedBreathing;","import React, { useState } from 'react';\n\nimport GuidedBreathhold from '../GuidedBreathhold/GuidedBreathhold';\nimport GuidedBreathing from '../GuidedBreathing/GuidedBreathing';\n\nimport './BreathingController.scss';\n\nconst BreathingController = () => {\n  const [runBreathing, setRunBreathing] = useState(false);\n  return (\n    <div className=\"breathing-controller\">\n      <GuidedBreathing setRunBreathing={setRunBreathing} />\n      <div className=\"separator\"/>\n      <GuidedBreathhold runBreathing={runBreathing} />\n    </div>\n  );\n};\n\nexport default BreathingController;","import React, { useState } from 'react';\nimport InputNumber from 'react-input-number';\n\nimport './NumberChooser.scss';\n \nconst NumberChooser = ({ number, setNumber, minVal = 10, maxVal = 20, step = 1}) => {\n  return (\n    <InputNumber \n      className=\"number-chooser\"\n      min={minVal} \n      max={maxVal} \n      step={step} \n      value={number} \n      onChange={setNumber} \n      enableMobileNumericKeyboard \n    />\n  );\n};\n\nexport default NumberChooser;","import React, { useContext } from 'react';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\n\nimport NumberChooser from '../NumberChooser/NumberChooser';\nimport { BreathConfigContext } from '../BreathConfigProvider/BreathConfigProvider';\n\nimport './BreathConfigModal.scss';\n\nconst BreathConfigModal = ({open, onCloseModal}) => {\n  const { maxBreath, setMaxBreath, shouldStartBreathHold, setShouldStartBreathHold } = useContext(BreathConfigContext);\n  return (\n    <div className=\"breath-config-modal-wrapper\">\n      <Modal\n        open={open} \n        onClose={onCloseModal} \n        center\n      >\n        <h2>Configuration</h2>\n        <div className=\"breath-modal-divider\" />\n        <h3>Guided Breathing</h3>\n        <div className=\"breath-modal-max-breath\">\n          <label>Max breath:</label>\n            <NumberChooser\n              number={maxBreath} \n              minVal={10}\n              maxVal={1000}\n              setNumber={setMaxBreath}\n            />\n        </div>\n        <div className=\"breath-modal-auto-start-breath-hold\">\n          <label>Auto start breathhold?</label>\n          <input\n            type=\"radio\"\n            checked={shouldStartBreathHold}\n            readOnly\n            onClick={() => setShouldStartBreathHold(!shouldStartBreathHold)} \n          />\n        </div>\n        <h3>Guided Breath-hold</h3>\n      </Modal>\n    </div>\n  );\n};\n\nexport default BreathConfigModal;","import React, {useState} from 'react';\n\nimport breathIcon from './media/breath_icon.svg';\nimport BreathController from './components/BreathingController/BreathingController';\nimport BreathConfigProvider from './components/BreathConfigProvider/BreathConfigProvider';\nimport BreathConfigModal from './components/BreathConfigModal/BreathConfigModal';\n\nimport './App.scss';\n\nconst App = () => {\n  const [openModal, setOpenModal] = useState(false);\n  const onOpenModal = () => setOpenModal(true);\n  const onCloseModal = () => setOpenModal(false);\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <img \n          className=\"header-icon\" \n          src={breathIcon} \n          onClick={() =>  onOpenModal()}\n          alt=\"logo\" />\n      </header>\n      <BreathConfigProvider>\n        <BreathController />\n        <BreathConfigModal open={openModal} onCloseModal={onCloseModal}/>\n      </BreathConfigProvider>   \n      {/* <br /> */}\n      {/* <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}