{"version":3,"sources":["media/breath_icon.svg","media/zapsplat_human_male_deep_breathing_19843_2.2s.mp3","media/breathing_session_over.mp3","media/lungs.svg","components/NormalButton/NormalButton.jsx","components/GuidedBreathing/GuidedBreathing.jsx","media/heart.svg","media/bell_sound.mp3","media/audio_fe4d3bcac9.mp3","components/GuidedBreathhold/GuidedBreathhold.jsx","components/NumberChooser/NumberChooser.jsx","components/BreathConfigModal/BreathConfigModal.jsx","App.js","hooks/localstorage.js","reportWebVitals.js","index.js"],"names":["NormalButton","text","onClick","className","props","GuidedBreathing","maxBreath","useContext","BreathConfigContext","useState","isRunning","setIsRunning","isPaused","setIsPaused","isDone","setIsDone","breathCounter","setBreathCounter","useSound","breathingSound","loop","playBreath","stopBreath","stop","pauseBreath","pause","breathingOverSound","interrupt","playBreathOver","useEffect","timer","setInterval","clearInterval","setTimeout","join","src","lungIcon","alt","disabled","GuidedBreathhold","bellSound","playBell","musicSound","playMusic","stopMusic","pauseMusic","useStopwatch","autoStart","seconds","minutes","hours","start","reset","heartIcon","NumberChooser","number","setNumber","minVal","maxVal","step","min","max","value","onChange","enableMobileNumericKeyboard","BreathConfigModal","open","onCloseModal","setMaxBreath","shouldStartBreathHold","setShouldStartBreathHold","onClose","center","type","checked","defaultConfig","breathing","breathHold","React","createContext","App","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useLocalStorage","config","setConfig","openModal","setOpenModal","breathIcon","Provider","num","bool","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15f10102.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/breath_icon.9f23d969.svg\";","export default __webpack_public_path__ + \"static/media/zapsplat_human_male_deep_breathing_19843_2.2s.f91a10f9.mp3\";","export default __webpack_public_path__ + \"static/media/breathing_session_over.3e8fa907.mp3\";","export default __webpack_public_path__ + \"static/media/lungs.e926ca5b.svg\";","import React from 'react';\n\nimport './NormalButton.scss';\n\n\nconst NormalButton = ({text, onClick, className, ...props}) => (\n  <button className={`normal-button ${className}`} onClick={onClick} {...props}>{text}</button>\n);\n\nexport default NormalButton;","import React, {useState,useEffect,useContext} from 'react';\nimport useSound from 'use-sound';\n\nimport breathingSound from '../../media/zapsplat_human_male_deep_breathing_19843_2.2s.mp3';\nimport breathingOverSound from '../../media/breathing_session_over.mp3';\nimport lungIcon from '../../media/lungs.svg';\nimport NormalButton from '../NormalButton/NormalButton';\nimport { BreathConfigContext } from '../../App';\n\nimport './GuidedBreathing.scss';\n\nconst BREATH_TIME = 2200;\nconst GuidedBreathing = () => {\n  const { maxBreath } = useContext(BreathConfigContext);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [isDone, setIsDone] = useState(false);\n  const [breathCounter, setBreathCounter] = useState(0);\n  const [playBreath, {stop: stopBreath, pause: pauseBreath }] = useSound(breathingSound, \n    {\n      loop: true\n    }\n  );\n  const [playBreathOver] = useSound(breathingOverSound, {interrupt: false});\n  useEffect(() => {\n    if(isRunning) {\n      const timer =\n        breathCounter > 0 && setInterval(() => setBreathCounter(breathCounter + 1), BREATH_TIME);\n      return () => clearInterval(timer);\n    }\n  }, [breathCounter]);\n\n  useEffect(() => {\n    if(isDone) {\n      playBreathOver();\n      setTimeout(() => stopBreath(), 1000);\n    }\n  }, [isDone])\n\n  if(isRunning && breathCounter === maxBreath) {\n    setIsDone(true);\n    setIsRunning(false);\n  }\n  return (\n    <div className=\"guided-breathing\">\n        <h1 className=\"guided-breathing-title\">Guided Breathing</h1>\n        <h2>{breathCounter} / {maxBreath}</h2>\n        <p>\n          <img className={['lung-icon', isRunning && 'lung-icon-animated'].join(\" \")} src={lungIcon} alt=\"logo\" />\n        </p>\n        <NormalButton className={`${isRunning ? 'active-button' : ''}`} text={`${isRunning ? 'Started' : 'Start'}`} disabled={isRunning}\n          onClick={() => {\n            if(!isRunning) {\n              setIsDone(false);\n              setIsRunning(true);\n              isPaused ?  setBreathCounter(breathCounter + 1) : setBreathCounter(1);\n              setIsPaused(false);\n              playBreath();\n            }\n          }}\n        />\n        <NormalButton className={`${isPaused ? 'active-button' : ''}`} text={`${isPaused ? 'Paused' : 'Pause'}`} disabled={isPaused || !isRunning}\n          onClick={() => {\n            if(isRunning) {\n              setIsRunning(false);\n              setIsPaused(true);\n              pauseBreath();\n            }\n          }}\n        />\n        <NormalButton text=\"Reset\"\n          onClick={() => {\n            stopBreath();\n            setIsRunning(false);\n            setIsPaused(false);\n            setIsDone(false);\n            setBreathCounter(0);\n          }}\n        />\n    </div>\n  );\n\n};\n\nexport default GuidedBreathing;","export default __webpack_public_path__ + \"static/media/heart.8e99651c.svg\";","export default __webpack_public_path__ + \"static/media/bell_sound.c679b23d.mp3\";","export default __webpack_public_path__ + \"static/media/audio_fe4d3bcac9.a379b9b0.mp3\";","import React, {useState} from 'react';\nimport useSound from 'use-sound';\nimport { useStopwatch } from 'react-timer-hook';\n\nimport NormalButton from '../NormalButton/NormalButton';\nimport heartIcon from '../../media/heart.svg';\nimport bellSound from '../../media/bell_sound.mp3';\nimport musicSound from '../../media/audio_fe4d3bcac9.mp3';\n\nimport './GuidedBreathhold.scss';\n\nconst SOUND_EVERY_NTH_SECOND = 30;\nconst GuidedBreathhold = ({}) => {\n  const [isPaused, setIsPaused] = useState(false);\n  const [playBell] = useSound(bellSound);\n  const [playMusic, { stop: stopMusic, pause: pauseMusic }] = useSound(musicSound, { loop: true });\n  const {\n    seconds,\n    minutes,\n    hours,\n    isRunning,\n    start,\n    pause,\n    reset\n  } = useStopwatch({ autoStart: false });\n\n  const startBreathHold = () => {\n    if(!isRunning) {\n      start();\n      if(isPaused) setIsPaused(false);\n      playBell();\n      playMusic();\n    }\n  }\n  const shouldPlayBell = isRunning && seconds !== 0 && seconds % SOUND_EVERY_NTH_SECOND === 0;\n  if(shouldPlayBell) playBell();\n  return (\n    <div className=\"guided-breath-hold\">\n      <h1 className=\"guided-breath-hold-title\">Guided Breath-hold</h1>\n      <div className=\"stop-watch\">\n        <div className=\"watch-time-text\">\n          <span>{hours}</span>:<span>{minutes}</span>:<span>{seconds}</span>\n        </div>\n      </div>\n      <p>\n        <img className={['heart-icon', isRunning && 'heart-icon-animated'].join(\" \")} src={heartIcon} alt=\"logo\" />\n      </p>\n      <NormalButton className={`${isRunning ? 'active-button' : ''}`} text={`${isRunning ? 'Started' : 'Start'}`} disabled={isRunning}\n        onClick={() => startBreathHold()}\n      />\n      <NormalButton className={`${isPaused ? 'active-button' : ''}`} text={`${isPaused ? 'Paused' : 'Pause'}`} disabled={isPaused || !isRunning}\n        onClick={() => {\n          if(isRunning) {\n            pause();\n            pauseMusic();\n            setIsPaused(true);\n          }\n        }}\n      />\n      <NormalButton text=\"Reset\" disabled={!isRunning && !isPaused}\n        onClick={() => {\n          if(isRunning || isPaused) {\n            reset();\n            stopMusic();\n            setIsPaused(false);\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default GuidedBreathhold;","import React, { useState } from 'react';\nimport InputNumber from 'react-input-number';\n\nimport './NumberChooser.scss';\n \nconst NumberChooser = ({ number, setNumber, minVal = 10, maxVal = 20, step = 1}) => {\n  return (\n    <InputNumber \n      className=\"number-chooser\"\n      min={minVal} \n      max={maxVal} \n      step={step} \n      value={number} \n      onChange={setNumber} \n      enableMobileNumericKeyboard \n    />\n  );\n};\n\nexport default NumberChooser;","import React, { useContext } from 'react';\nimport 'react-responsive-modal/styles.css';\nimport { Modal } from 'react-responsive-modal';\n\nimport { BreathConfigContext } from '../../App';\nimport NumberChooser from '../NumberChooser/NumberChooser';\n\nimport './BreathConfigModal.scss';\n\n\nconst BreathConfigModal = ({open, onCloseModal}) => {\n  const { maxBreath, setMaxBreath, shouldStartBreathHold, setShouldStartBreathHold } = useContext(BreathConfigContext);\n  return (\n    <div className=\"breath-config-modal-wrapper\">\n      <Modal\n        open={open} \n        onClose={onCloseModal} \n        center\n      >\n        <h2>Configuration</h2>\n        <div className=\"breath-modal-divider\" />\n        <h3>Guided Breathing</h3>\n        <div className=\"breath-modal-max-breath\">\n          <label>Max breath:</label>\n            <NumberChooser\n              number={maxBreath} \n              minVal={10}\n              maxVal={1000}\n              setNumber={setMaxBreath}\n            />\n        </div>\n        <div className=\"breath-modal-auto-start-breath-hold\">\n          <label>Auto start breathhold?</label>\n          <input\n            type=\"radio\"\n            checked={shouldStartBreathHold} \n            onClick={() => setShouldStartBreathHold(!shouldStartBreathHold)} \n          />\n        </div>\n        <h3>Guided Breath-hold</h3>\n      </Modal>\n    </div>\n  );\n};\n\nexport default BreathConfigModal;","import React, {useState} from 'react';\n\nimport breathIcon from './media/breath_icon.svg';\nimport GuidedBreathing from './components/GuidedBreathing/GuidedBreathing';\nimport GuidedBreathhold from './components/GuidedBreathhold/GuidedBreathhold';\nimport BreathConfigModal from './components/BreathConfigModal/BreathConfigModal';\nimport { useLocalStorage } from './hooks/localstorage';\n\nimport './App.scss';\n\n// TODO: Use maxBreath info from react context?\nconst defaultConfig = {\n  breathing: {\n    maxBreath: 40,\n    shouldStartBreathHold: false,\n  },\n  breathHold: {\n    // TODO: fill me up.\n  }\n};\n\nexport const BreathConfigContext = React.createContext(defaultConfig);\n\nfunction App() {\n  const [config, setConfig] = useLocalStorage('breathConfig', defaultConfig);\n  const [openModal, setOpenModal] = useState(false);\n  const onOpenModal = () => setOpenModal(true);\n  const onCloseModal = () => setOpenModal(false);\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <img \n          className=\"header-icon\" \n          src={breathIcon} \n          onClick={() => {\n            onOpenModal();\n          }}\n          alt=\"logo\" />\n      </header>\n      {/* TODO: Simplyfi setting of config? */}\n      <BreathConfigContext.Provider\n        value={{\n          maxBreath: config.breathing.maxBreath,\n          setMaxBreath: (num) => setConfig({...config, breathing: {...config.breathing, maxBreath: num} }),\n          shouldStartBreathHold: config.breathing.shouldStartBreathHold,\n          setShouldStartBreathHold: (bool) => setConfig({...config, breathing: {...config.breathing, shouldStartBreathHold: bool} }),\n          // TODO: make generalcontext for state!! startBreathHold: (breathHoldFunc) => breathHoldFunc(),\n        }}\n      >\n        <GuidedBreathing />\n        <div className=\"separator\"/>\n        <GuidedBreathhold />\n        <BreathConfigModal open={openModal} onCloseModal={onCloseModal}/>\n      </BreathConfigContext.Provider>\n      {/* <br /> */}\n      {/* <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div> */}\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}